from flask import Flask, request, jsonify
import requests
import spacy
from spacy.matcher import PhraseMatcher
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.svm import SVC

app = Flask(__name__)

# ✅ Load spaCy Model
nlp = spacy.load("en_core_web_sm")

# ✅ Predefined Symptoms List
SYMPTOM_KEYWORDS = ["bleeding", "fracture", "wound", "limping", "shivering", 
                    "vomiting", "injury", "burn", "pus", "weakness", "cough", "blood"]
matcher = PhraseMatcher(nlp.vocab)
patterns = [nlp(text) for text in SYMPTOM_KEYWORDS]
matcher.add("SYMPTOMS", patterns)

# ✅ Sample Training Data for Urgency Classification
X_train = ["profuse bleeding, unconscious", "broken leg, limping", "shivering, minor wound", "healthy, walking normally"]
y_train = ["HIGH", "MEDIUM", "MEDIUM", "LOW"]

vectorizer = CountVectorizer()
X_train_vectors = vectorizer.fit_transform(X_train)
clf = SVC(kernel="linear")
clf.fit(X_train_vectors, y_train)

# ✅ Extract Symptoms & Location
def extract_entities(text):
    doc = nlp(text)
    symptoms = []
    location = None

    matches = matcher(doc)
    for match_id, start, end in matches:
        symptoms.append(doc[start:end].text)

    for ent in doc.ents:
        if ent.label_ in ["GPE", "LOC"]:
            location = ent.text

    return {"symptoms": list(set(symptoms)), "location": location}

# ✅ Urgency Classification
def predict_urgency(user_input):
    X_test_vector = vectorizer.transform([user_input])
    return clf.predict(X_test_vector)[0]

# ✅ WhatsApp Report Generator
def generate_whatsapp_report(data, entities, urgency):
    case_id = f"SH-20250308-{str(data['case_id']).zfill(5)}"
    image_url = f"[View Reported Case]({data['image_path']})"
    
    symptoms_text = ", ".join(entities["symptoms"]) if entities["symptoms"] else "No visible injury"
    location_text = entities["location"] if entities["location"] else "(Location not provided)"

    report = f"""
📢 *Urgent Stray Animal Assistance Required!*

🆔 *Case ID:* {case_id}
📍 *Location:* {location_text}
🖼 *Image:* {image_url}
🔍 *Detection:* {data['prediction']} ({symptoms_text})
⚠ *Urgency Level:* {urgency} (Review needed)

🚀 *Action Required:* Please review the case and initiate rescue intervention.
📞 *Contact Person (If Available):* Sanket Suryawanshi (+91XXXXXXXXXX)

🔗 [Update Case Status Here](NGO Dashboard)

This message was auto-generated by *Stray Help* – A Technology-Driven Platform for Stray Animal Welfare.
    """
    return report.strip()

# ✅ API Endpoint: /api/result
@app.route('/http://localhost:5000/api/result', methods=['GET'])
def get_result():
    # Get Parameters from GET Request
    case_id = request.args.get("case_id")
    image_path = request.args.get("image_path")
    prediction = request.args.get("prediction")
    user_input = request.args.get("user_input")

    if not (case_id and image_path and prediction and user_input):
        return jsonify({"error": "Missing parameters"}), 400

    # NLP Processing
    entities = extract_entities(user_input)
    urgency = predict_urgency(user_input)
    data = {"case_id": int(case_id), "image_path": image_path, "prediction": prediction, "user_input": user_input}

    # Generate WhatsApp Report
    final_report = generate_whatsapp_report(data, entities, urgency)

    # ✅ Send Report to /api/nlp Endpoint
    response = requests.post("http://localhost:6000/api/nlp", json={"report": final_report})

    return jsonify({"report": final_report, "nlp_response": response.json()})

# ✅ API Endpoint: /api/nlp (Receives Report)
@app.route('/api/nlp', methods=['POST'])
def receive_nlp():
    data = request.json
    if not data or "report" not in data:
        return jsonify({"error": "Invalid request"}), 400

    # Print received report
    print("\n🚀 Received WhatsApp Report:\n", data["report"])

    return jsonify({"message": "Report received successfully!"})

# ✅ Run Flask App on Port 6000
if __name__ == '__main__':
    app.run(port=6000, debug=True)
